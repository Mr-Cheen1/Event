package events

import (
	"os"
	"testing"
	"time"

	"github.com/Mr-Cheen1/Event/bot"
	"github.com/Mr-Cheen1/Event/config"
)

func TestLoad(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–±—ã—Ç–∏–π
	tmpfile, err := os.CreateTemp("", "events.json")
	if err != nil {
		t.Fatal(err)
	}
	defer os.Remove(tmpfile.Name())

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
	testEvents := []byte(`[
		{"date": "01.01", "event": "–ù–æ–≤—ã–π –≥–æ–¥"},
		{"date": "07.01", "event": "–†–æ–∂–¥–µ—Å—Ç–≤–æ"}
	]`)
	if _, err := tmpfile.Write(testEvents); err != nil {
		t.Fatal(err)
	}
	if err := tmpfile.Close(); err != nil {
		t.Fatal(err)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è
	events, err := Load(tmpfile.Name())
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–±—ã—Ç–∏–π: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
	if len(events) != 2 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–æ–±—ã—Ç–∏—è, –ø–æ–ª—É—á–µ–Ω–æ %d", len(events))
	}
	if events[0].Date != "01.01" || events[0].Event != "–ù–æ–≤—ã–π –≥–æ–¥" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: %v", events[0])
	}
	if events[1].Date != "07.01" || events[1].Event != "–†–æ–∂–¥–µ—Å—Ç–≤–æ" {
		t.Errorf("–ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ç–æ—Ä–æ–µ —Å–æ–±—ã—Ç–∏–µ: %v", events[1])
	}
}

func TestCheckEvents(t *testing.T) {
	// –°–æ–∑–¥–∞–µ–º –º–æ–∫-–æ–±—ä–µ–∫—Ç—ã
	mockBot := &bot.MockBot{}
	mockConfig := &config.Config{
		ChatID: 123456,
	}
	testEvents := []Event{
		{Date: "01.01", Event: "–ù–æ–≤—ã–π –≥–æ–¥"},
		{Date: "07.01", Event: "–†–æ–∂–¥–µ—Å—Ç–≤–æ"},
	}

	scheduler := NewScheduler(mockConfig, mockBot, testEvents)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–±—ã—Ç–∏–π
	now := time.Date(2024, 1, 1, 0, 0, 0, 0, time.UTC)
	scheduler.checkEvents(now)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if len(mockBot.SentMessages) != 1 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 1 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–æ %d", len(mockBot.SentMessages))
	}
	expectedMessage := "üòè –°–µ–≥–æ–¥–Ω—è –ù–æ–≤—ã–π –≥–æ–¥ üòâ"
	if mockBot.SentMessages[0] != expectedMessage {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ '%s', –ø–æ–ª—É—á–µ–Ω–æ '%s'", expectedMessage, mockBot.SentMessages[0])
	}
}
