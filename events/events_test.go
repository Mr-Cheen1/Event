package events

import (
	"testing"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type MockBotAPI struct {
	Messages []tgbotapi.MessageConfig
}

func (m *MockBotAPI) Send(c tgbotapi.Chattable) (tgbotapi.Message, error) {
	msg, ok := c.(tgbotapi.MessageConfig)
	if !ok {
		return tgbotapi.Message{}, nil
	}
	m.Messages = append(m.Messages, msg)
	return tgbotapi.Message{}, nil
}

func TestLoadEvents(t *testing.T) {
	events := LoadEvents("../events.json")
	if len(events) == 0 {
		t.Error("Expected events to be loaded, but got none")
	}
}

func TestCheckEvents(t *testing.T) {
	mockBot := &MockBotAPI{}
	events := []Event{
		{Date: "15.10", Event: "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"},
		{Date: "17.10", Event: "–ì–æ–¥–æ–≤—â–∏–Ω–∞"},
	}

	now := time.Date(2023, 10, 15, 0, 0, 0, 0, time.UTC)
	chatID := int64(12345)

	CheckEvents(mockBot, events, now, chatID)

	if len(mockBot.Messages) != 2 {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å 2 —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ %d", len(mockBot.Messages))
	}

	expectedMessages := []string{
		"üòè –°–µ–≥–æ–¥–Ω—è –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è üòâ",
		"ü§î –°–∫–æ—Ä–æ –ì–æ–¥–æ–≤—â–∏–Ω–∞ üëÄ",
	}

	for i, msg := range mockBot.Messages {
		if msg.Text != expectedMessages[i] {
			t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–µ '%s', –Ω–æ –ø–æ–ª—É—á–µ–Ω–æ '%s'", expectedMessages[i], msg.Text)
		}
	}
}
