package events

import (
	"fmt"
	"log"
	"os"
	"time"

	"github.com/Mr-Cheen1/Event/bot"
	"github.com/Mr-Cheen1/Event/config"
	"gopkg.in/yaml.v3"
)

// convertToGoWeekday –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (1-7) –≤ —Ñ–æ—Ä–º–∞—Ç Go (0-6)
func convertToGoWeekday(russianWeekday int) int {
	if russianWeekday == 7 {
		return 0 // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
	}
	return russianWeekday
}

// convertFromGoWeekday –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ Go (0-6) –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (1-7)
func convertFromGoWeekday(goWeekday int) int {
	if goWeekday == 0 {
		return 7 // –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
	}
	return goWeekday
}

type EventRule struct {
	DayOfWeek   *int `yaml:"day_of_week,omitempty"`   // 1-7 (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 1, –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 7)
	DayOfMonth  *int `yaml:"day_of_month,omitempty"`  // 1-31
	Month       *int `yaml:"month,omitempty"`         // 1-12
	DayOfYear   *int `yaml:"day_of_year,omitempty"`   // 1-366
	WeekOfMonth *int `yaml:"week_of_month,omitempty"` // 1-5 (5 = –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è)
}

type Event struct {
	Event string    `yaml:"event"`
	Rule  EventRule `yaml:"rule"`
}

func Load(filename string) ([]Event, error) {
	data, err := os.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var events []Event
	if err := yaml.Unmarshal(data, &events); err != nil {
		return nil, err
	}

	return events, nil
}

type Scheduler struct {
	config *config.Config
	bot    bot.API
	events []Event
}

func NewScheduler(cfg *config.Config, bot bot.API, events []Event) *Scheduler {
	return &Scheduler{
		config: cfg,
		bot:    bot,
		events: events,
	}
}

func (s *Scheduler) Start() {
	loc, err := time.LoadLocation(s.config.Timezone)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: %v", err)
	}

	for {
		now := time.Now().In(loc)
		notificationTime, err := time.ParseInLocation("15:04", s.config.NotificationTime, loc)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %v", err)
			time.Sleep(1 * time.Minute)
			continue
		}
		notificationTime = time.Date(
			now.Year(), now.Month(), now.Day(),
			notificationTime.Hour(), notificationTime.Minute(),
			0, 0, loc,
		)

		if now.Equal(notificationTime) || now.After(notificationTime) && now.Before(notificationTime.Add(1*time.Minute)) {
			s.checkEvents(now)
			time.Sleep(24 * time.Hour)
		} else {
			time.Sleep(time.Until(notificationTime))
		}
	}
}

func (s *Scheduler) isEventToday(event Event, now time.Time) bool {
	rule := event.Rule

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–Ω—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞)
	if rule.DayOfYear != nil {
		currentDayOfYear := now.YearDay()
		return currentDayOfYear == *rule.DayOfYear
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—è—Ü
	if rule.Month != nil && int(now.Month()) != *rule.Month {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
	if rule.DayOfMonth != nil && now.Day() != *rule.DayOfMonth {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ Go –≤ —Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
	if rule.DayOfWeek != nil {
		currentWeekday := convertFromGoWeekday(int(now.Weekday()))
		if currentWeekday != *rule.DayOfWeek {
			return false
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—é –º–µ—Å—è—Ü–∞
	if rule.WeekOfMonth != nil {
		weekNum := (now.Day()-1)/7 + 1
		isLastWeek := now.Day() >= 22 // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏

		if *rule.WeekOfMonth == 5 && !isLastWeek {
			return false
		} else if *rule.WeekOfMonth != 5 && weekNum != *rule.WeekOfMonth {
			return false
		}
	}

	return true
}

func (s *Scheduler) getNextEventDate(event Event, now time.Time) time.Time {
	current := now

	// –ú–∞–∫—Å–∏–º—É–º 366 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ (–¥–ª—è –≤–∏—Å–æ–∫–æ—Å–Ω–æ–≥–æ –≥–æ–¥–∞)
	for i := 0; i < 366; i++ {
		if s.isEventToday(event, current) {
			return current
		}
		current = current.AddDate(0, 0, 1)
	}

	return now // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–µ—Ä–Ω–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
}

func (s *Scheduler) checkEvents(now time.Time) {
	todayDate := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, now.Location())

	log.Printf("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π [%s] ===", now.Format("2006-01-02 15:04:05"))

	hasEvents := false
	for _, event := range s.events {
		eventDate := s.getNextEventDate(event, todayDate)
		daysUntilEvent := int(eventDate.Sub(todayDate).Hours() / 24)

		// –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–µ–¥–µ–ª–∏)
		if daysUntilEvent <= 7 {
			hasEvents = true
			log.Printf("üóì %s: %s (—á–µ—Ä–µ–∑ %d –¥–Ω.)",
				eventDate.Format("02.01.2006"),
				event.Event,
				daysUntilEvent)
		}

		var message string
		if daysUntilEvent == 2 {
			message = fmt.Sprintf("ü§î –°–∫–æ—Ä–æ %s üëÄ", event.Event)
		} else if daysUntilEvent == 0 {
			message = fmt.Sprintf("üòè –°–µ–≥–æ–¥–Ω—è %s üòâ", event.Event)
		}

		if message != "" {
			if err := s.bot.SendMessage(s.config.ChatID, message); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
			} else {
				log.Printf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: %s", message)
			}
		}
	}

	if !hasEvents {
		log.Printf("–í –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç")
	}
	log.Printf("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===\n")
}
